name: CI — All-in-One

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
  workflow_dispatch: {}

# Necesario para publicar en GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-all:
    name: Lint + Unit + API + E2E (Playwright) + Selenium + VisualAI
    runs-on: ubuntu-latest
    timeout-minutes: 45

    env:
      APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install pytest-html

      # Cache de browsers de Playwright (acelera corridas siguientes)
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-msplaywright-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-msplaywright-

      # Instala dependencias del sistema + browsers de Playwright de forma optimizada
      - name: Setup Playwright (deps + browsers)
        uses: microsoft/playwright-github-action@v1

      # Chrome rápido (evita apt-get pesado)
      - name: Setup Chrome (fast)
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable

      - name: Lint (Ruff)
        run: ruff check .

      # Levanta FastAPI y espera hasta que responda (loop bash con curl)
      - name: Start FastAPI (background) & wait until ready
        run: |
          nohup uvicorn app.main:app --host 127.0.0.1 --port 8000 > uvicorn.log 2>&1 &
          for i in {1..30}; do
            if curl -sSf http://127.0.0.1:8000 > /dev/null; then
              echo "Server is up"
              break
            fi
            sleep 1
          done
          # falla si no respondió
          curl -sSf http://127.0.0.1:8000 > /dev/null

      # === TESTS + REPORTES HTML (para publicar luego en Pages) ===
      - name: Run tests (Unit + API + E2E) with HTML reports
        run: |
          mkdir -p test-results/html test-results/junit
          pytest -q qa/tests_unit --junitxml=test-results/junit/unit.xml --html=test-results/html/unit.html --self-contained-html
          pytest -q qa/tests_api  --junitxml=test-results/junit/api.xml  --html=test-results/html/api.html  --self-contained-html
          pytest -q qa/tests_e2e  --junitxml=test-results/junit/e2e.xml  --html=test-results/html/e2e.html  --self-contained-html

      - name: Selenium (headless) with HTML report
        run: |
          pytest -q selenium/tests/test_login_selenium.py --junitxml=test-results/junit/selenium.xml --html=test-results/html/selenium.html --self-contained-html

      - name: Visual AI (Applitools) — optional
        if: ${{ env.APPLITOOLS_API_KEY != '' }}
        env:
          APPLITOOLS_API_KEY: ${{ env.APPLITOOLS_API_KEY }}
        run: |
          pytest -q selenium/tests/test_login_visual_ai.py --junitxml=test-results/junit/visual-ai.xml --html=test-results/html/visual-ai.html --self-contained-html || true

      - name: Build report site (index.html)
        run: |
          mkdir -p site
          cat > site/index.html <<'HTML'
          <!doctype html>
          <html lang="en">
          <head>
            <meta charset="utf-8"/>
            <meta name="viewport" content="width=device-width, initial-scale=1"/>
            <title>AI-QA-Starter — Test Report</title>
            <style>
              body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Noto Sans,sans-serif; margin:40px; line-height:1.5}
              h1{margin-bottom:0}
              .meta{color:#666;margin:4px 0 24px}
              ul{padding-left:18px}
              a{color:#0b5fff;text-decoration:none}
              a:hover{text-decoration:underline}
              .card{border:1px solid #e5e7eb;border-radius:12px;padding:16px;margin:12px 0}
              .grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(260px,1fr));gap:16px}
              code{background:#f6f8fa;padding:2px 6px;border-radius:6px}
            </style>
          </head>
          <body>
            <h1>AI-QA-Starter — Test Report</h1>
            <div class="meta">
              Branch: <code>${GITHUB_REF#refs/heads/}</code> • Commit: <code>${GITHUB_SHA}</code>
            </div>
            <div class="grid">
              <div class="card"><h3>Unit</h3><a href="./html/unit.html">View report</a></div>
              <div class="card"><h3>API</h3><a href="./html/api.html">View report</a></div>
              <div class="card"><h3>E2E (Playwright)</h3><a href="./html/e2e.html">View report</a></div>
              <div class="card"><h3>Selenium</h3><a href="./html/selenium.html">View report</a></div>
              <div class="card"><h3>Visual AI</h3><a href="./html/visual-ai.html">View report</a> (if present)</div>
            </div>
          </body>
          </html>
          HTML
          cp -r test-results/html site/html
          cp -r test-results/junit site/junit
          cp uvicorn.log site/ 2>/dev/null || true

      - name: Upload logs/artifacts (zip)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-and-reports
          path: |
            uvicorn.log
            test-results/**
          if-no-files-found: ignore

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

  publish-report:
    name: Publish Web Report (GitHub Pages)
    needs: test-all
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
